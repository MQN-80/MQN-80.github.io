import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as e,c,d as l,a as s,b as n,e as t,f as u}from"./app-0a8ee19d.js";const i={},k=s("h1",{id:"cppcon2024-designing-a-slimmer-vector-of-variants",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#cppcon2024-designing-a-slimmer-vector-of-variants","aria-hidden":"true"},"#"),n(" CppCon2024: Designing a Slimmer Vector of Variants")],-1),r={href:"https://schedule.cppnow.org/wp-content/uploads/2024/02/Designing_a_Slimmer_Vector_of_Variants_-_CNow.pdf",target:"_blank",rel:"noopener noreferrer"},d={href:"https://zhuanlan.zhihu.com/p/1923145557515412512",target:"_blank",rel:"noopener noreferrer"},v=u(`<h2 id="solution-origin-原始解决方案" tabindex="-1"><a class="header-anchor" href="#solution-origin-原始解决方案" aria-hidden="true">#</a> solution-origin:原始解决方案</h2><p>首先最直观的方案就是直接用vector存储variant,但我们要注意每个variant的大小都是取所有类型中最大类型的尺寸,因此这样存储会带来巨大的内存开销，尤其是在内部有类型长度过长的情况下，比如demo中的char[5000],我们可以给出代码示例如下:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">big_data</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">solution_origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;solution origin解决方案&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">using</span> complex_type<span class="token operator">=</span>std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span>big_data<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>complex_type<span class="token operator">&gt;</span>stos<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token string">&quot;ssss&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector附加信息大小&quot;</span><span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stos<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector存储信息大小&quot;</span><span class="token operator">&lt;&lt;</span>stos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果我们可以看出vector本身的内存占用是24字节，包含存储容量(8字节)，存储个数(8字节)，数组指针(8字节)；而存储信息大小为(5000+8)*4=20032字节，5000是最大类型char[5000]的长度，而8是variant类型的索引信息</p><h2 id="solution1-用指针存储" tabindex="-1"><a class="header-anchor" href="#solution1-用指针存储" aria-hidden="true">#</a> solution1:用指针存储</h2><p>因为variant大小取决于最大类型的长度，因此我们自然想到，假如存储指针的话，则最大长度就是指针长度8，从而减少很多无效的内存占用，其代码如下:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">solution1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;solution 1解决方案&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">using</span> complex_type<span class="token operator">=</span>std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span>big_data<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>complex_type<span class="token operator">&gt;</span>stos<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector附加信息大小&quot;</span><span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stos<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">//std::cout&lt;&lt;*std::get&lt;int*&gt;(stos[0]);</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector指针大小&quot;</span><span class="token operator">&lt;&lt;</span>stos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>stos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector存储信息大小&quot;</span><span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>stos<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果我们可以看出减少了很多空间占用，vector存储指针大小为4*(8+8)=64字节，而对象存储占用空间大小为(1+4+8+32)=45字节，字符串为32字节是因为这里默认使用sso短字符串优化，内存总占用为24+54+45=133字节<br> 虽然我们减少了内存占用，但这样做还是有很多不足之处，最明显的就是内存碎片化，对访存不友好，且每次需要申请和释放内存，因此我们需要进一步改进</p><h2 id="solution2-pmr-指针改进" tabindex="-1"><a class="header-anchor" href="#solution2-pmr-指针改进" aria-hidden="true">#</a> solution2:pmr+指针改进</h2><p>上面说到直接用裸指针需要每次都申请内存，因此我们用placement new的方法来实现内存池，在这里我们用pmr申请一块56字节大小的缓冲区(4+4+8+40)，字符串变为40字节是因为我们这里使用的是std::pmr::string，元信息中多了一个指针，当然我们也可以吧vector放到buffer里，但是我们预先用resize的话，也不用申请内存，并且实践发现两者都放到buffer里内存占用会增加?..</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">solution2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;solution2解决方案\\n&quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>byte<span class="token punctuation">,</span> <span class="token number">56</span><span class="token operator">&gt;</span> buffer<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>monotonic_buffer_resource <span class="token function">pool</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">using</span> big_data <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// pmr大数据结构</span>
    <span class="token keyword">using</span> str_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span>

    <span class="token keyword">using</span> complex_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">,</span> str_type<span class="token operator">*</span><span class="token punctuation">,</span> big_data<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>complex_type<span class="token operator">&gt;</span> vec<span class="token punctuation">;</span> 
    vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//resize到4提前扩容</span>
    <span class="token keyword">bool</span><span class="token operator">*</span> pb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">alignof</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配空间并 placement new 构造</span>
    <span class="token keyword">int</span><span class="token operator">*</span> pi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span><span class="token operator">*</span> pd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    str_type<span class="token operator">*</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str_type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>str_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">str_type</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//std::cout&lt;&lt;sizeof(*ps);</span>
    vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>pd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector附加信息大小&quot;</span><span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector指针大小&quot;</span><span class="token operator">&lt;&lt;</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;vector存储信息大小&quot;</span><span class="token operator">&lt;&lt;</span>buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">// ❗无需 delete，内存随 pool 一起释放</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改进后总内存占用为24+64+56=144字节，多出的字节是pmr的开销，当然我们也可以直接placement new来节省这个开销，但pmr的主要作用是避免频繁动态申请内存，为了更方便的查看运行过程中是否有动态内存申请，我们也可以简单的通过下面这个函数来打印:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;new&gt;</span></span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[!] global new called with size &quot;</span> <span class="token operator">&lt;&lt;</span> size <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[!] global delete called\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="solution3-手动实现内存友好的vector" tabindex="-1"><a class="header-anchor" href="#solution3-手动实现内存友好的vector" aria-hidden="true">#</a> solution3:手动实现内存友好的vector</h2><p>根据原pdf的指引，最终想要实现一个缓存友好，防止数据存储碎片化问题，且保证内存占用不会过高问题的vector，我们参考原文，通过offsets，types，data三个数组来实现该功能，具体代码如下:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取类型索引</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>size_t <span class="token function">type_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">variant</span><span class="token generic class-name"><span class="token operator">&lt;</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>in_place_type<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Ts<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">HeteroVector</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">using</span> VariantType <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    <span class="token function">HeteroVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">HeteroVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Ts<span class="token operator">&gt;</span> <span class="token operator">||</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Type not in variant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t tidx <span class="token operator">=</span> <span class="token generic-function"><span class="token function">type_index</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        size_t align <span class="token operator">=</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// resize 提前扩容足够空间,可能有一些空的</span>
        size_t reserve_size <span class="token operator">=</span> current_offset_ <span class="token operator">+</span> align <span class="token operator">+</span> size<span class="token punctuation">;</span>
        data_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>reserve_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// std::cout&lt;&lt;current_offset_&lt;&lt;&quot; &quot;&lt;&lt;align&lt;&lt;&quot; &quot;&lt;&lt;size&lt;&lt;std::endl;</span>
        <span class="token keyword">void</span><span class="token operator">*</span> raw_ptr <span class="token operator">=</span> data_<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> current_offset_<span class="token punctuation">;</span>
        size_t space <span class="token operator">=</span> reserve_size <span class="token operator">-</span> current_offset_<span class="token punctuation">;</span>  <span class="token comment">// 更新 space AFTER resize</span>
        <span class="token comment">//找到对齐后的指针位置</span>
        <span class="token keyword">void</span><span class="token operator">*</span> aligned_ptr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">align</span><span class="token punctuation">(</span>align<span class="token punctuation">,</span> size<span class="token punctuation">,</span> raw_ptr<span class="token punctuation">,</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>aligned_ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果空间足够，这里就不会失败</span>

        T<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>aligned_ptr<span class="token punctuation">)</span> <span class="token function">T</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

        size_t new_offset <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint8_t</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>aligned_ptr<span class="token punctuation">)</span> <span class="token operator">-</span> data_<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        offsets_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>new_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        type_indices_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint8_t</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>tidx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        current_offset_ <span class="token operator">=</span> new_offset <span class="token operator">+</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    VariantType <span class="token function">get</span><span class="token punctuation">(</span>size_t index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> offsets_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t offset <span class="token operator">=</span> offsets_<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">uint8_t</span> type_id <span class="token operator">=</span> type_indices_<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">get_impl</span><span class="token punctuation">(</span>type_id<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> offsets_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            size_t offset <span class="token operator">=</span> offsets_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">uint8_t</span> tid <span class="token operator">=</span> type_indices_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">destroy_impl</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        offsets_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        type_indices_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        current_offset_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;========== HeteroVector Memory Layout ==========\\n&quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Total buffer size: &quot;</span> <span class="token operator">&lt;&lt;</span> data_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; B\\n&quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Current offset (used): &quot;</span> <span class="token operator">&lt;&lt;</span> offsets_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; B\\n&quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;type_indices_:&quot;</span><span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>type_indices_<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot; B\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//std::cout &lt;&lt; &quot;Allocated object count: &quot; &lt;&lt; offsets_.size() &lt;&lt; &quot;\\n\\n&quot;;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> offsets_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            size_t offset <span class="token operator">=</span> offsets_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">uint8_t</span> tid <span class="token operator">=</span> type_indices_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Index &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">using</span> T <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>decay_t<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Type = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, Size = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
                        <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, Value = &quot;</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, Offset = &quot;</span> <span class="token operator">&lt;&lt;</span> offset
                    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, Aligned Address = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data_<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;===============================================\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">uint8_t</span><span class="token operator">&gt;</span> data_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>size_t<span class="token operator">&gt;</span> offsets_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">uint8_t</span><span class="token operator">&gt;</span> type_indices_<span class="token punctuation">;</span>
    size_t current_offset_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// ========== 类型辅助函数 ==========</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
    VariantType <span class="token function">wrap_variant</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">VariantType</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    VariantType <span class="token function">get_impl</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> tid<span class="token punctuation">,</span> size_t offset<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get_from_table</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>index_sequence_for<span class="token operator">&lt;</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Is<span class="token operator">&gt;</span>
    VariantType <span class="token function">get_from_table</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> tid<span class="token punctuation">,</span> size_t offset<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>index_sequence<span class="token operator">&lt;</span>Is<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">using</span> Func <span class="token operator">=</span> <span class="token function">VariantType</span><span class="token punctuation">(</span>HeteroVector<span class="token double-colon punctuation">::</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">constexpr</span> Func jump_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token operator">&amp;</span>HeteroVector<span class="token double-colon punctuation">::</span><span class="token keyword">template</span> get_as<span class="token operator">&lt;</span>Ts<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token operator">*</span>jump_table<span class="token punctuation">[</span>tid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
    VariantType <span class="token function">get_as</span><span class="token punctuation">(</span>size_t offset<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">VariantType</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> T<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data_<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">destroy_impl</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> tid<span class="token punctuation">,</span> size_t offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">destroy_from_table</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>index_sequence_for<span class="token operator">&lt;</span>Ts<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Is<span class="token operator">&gt;</span>
    <span class="token keyword">void</span> <span class="token function">destroy_from_table</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> tid<span class="token punctuation">,</span> size_t offset<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>index_sequence<span class="token operator">&lt;</span>Is<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">using</span> Func <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span>HeteroVector<span class="token double-colon punctuation">::</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">constexpr</span> Func destroyers<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token operator">&amp;</span>HeteroVector<span class="token double-colon punctuation">::</span><span class="token keyword">template</span> destroy<span class="token operator">&lt;</span>Ts<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token operator">*</span>destroyers<span class="token punctuation">[</span>tid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span>size_t offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data_<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token operator">~</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">solution3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;solution3&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    HeteroVector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// for (size_t i = 0; i &lt; vec.size(); ++i) {</span>
    <span class="token comment">//     std::visit([](auto&amp;&amp; v) { std::cout &lt;&lt; v &lt;&lt; &quot;\\n&quot;; }, vec.get(i));</span>
    <span class="token comment">// }</span>
    vec<span class="token punctuation">.</span><span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过模版来实现对vec的访问，根据索引来获取偏移量，从uint8数组中直接获取对应值，并且存储数据的data数组是连续内存<br> 通过align来进行数据对齐避免访问时出错，假如我们知道要可能要存储的数据大小，我们也可以直接reverse data数组来避免多次扩容的性能损失</p>`,17);function m(b,f){const a=o("ExternalLinkIcon");return e(),c("div",null,[k,l(' <embed src="/imgs/谈谈在线表格协同方案.pdf" type="application/pdf" width="1200" height="1200" > '),s("p",null,[n("本文章是对于cppcon24一篇文章的简单复现,原文地址如下"),s("a",r,[n("Designing a Slimmer Vector of Variants"),t(a)]),n(",相关解读如下"),s("a",d,[n("cppcon24解读:设计一个紧凑的Vector of Variants"),t(a)]),n(",本文就是根据原文和解读进行相关复现")]),v])}const g=p(i,[["render",m],["__file","variant_mem.html.vue"]]);export{g as default};
