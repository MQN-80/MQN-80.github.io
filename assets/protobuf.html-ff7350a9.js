import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-0a9986d2.js";const t="/assets/pb-56b02402.jpg",o={},e=p('<h1 id="_1-protobuf简介" tabindex="-1"><a class="header-anchor" href="#_1-protobuf简介" aria-hidden="true">#</a> 1. protobuf简介</h1><p>Protobuf(pb)是一种常见的数据序列化方式,常常用于进程间序列化信息传递,相对于传统的csv,json等,pb在缩小可读性的基础上,不仅结构体积小,而且解析速度快,其对比如下图所示:</p><table><thead><tr><th>特性\\类型</th><th>xml</th><th>json</th><th>protobuf</th></tr></thead><tbody><tr><td>数据结构支持</td><td>简单结构</td><td>简单结构</td><td>复杂结构</td></tr><tr><td>数据保存方式</td><td>文本</td><td>文本</td><td>二进制</td></tr><tr><td>数据保存大小</td><td>大</td><td>大</td><td>小</td></tr><tr><td>编解码效率</td><td>慢</td><td>慢</td><td>快</td></tr><tr><td>语言支持程度</td><td>覆盖主流语言</td><td>覆盖主流语言</td><td>覆盖主流语言</td></tr></tbody></table><p>后端常用于微服务信息传递,也广泛用于自动驾驶场景中,用于实现低延时,可靠 的进程间通信结构,因此为了实现通信中间件,需要对protobuf及其反射原理进行调研</p><h1 id="_2-pb反射使用" tabindex="-1"><a class="header-anchor" href="#_2-pb反射使用" aria-hidden="true">#</a> 2.pb反射使用</h1><p>Message成员变量类图: <img src="'+t+`" alt=""> 一般使用 PB 反射的步骤如下：</p><ol><li>通过Message获取单个字段的FieldDescriptor</li><li>通过Message获取其Reflection</li><li>通过Reflection来操作FieldDescriptor，从而动态获取或修改单个字段 获取 Descript、Reflection 的函数：</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Reflection<span class="token operator">*</span> pReflection <span class="token operator">=</span> pMessage<span class="token operator">-&gt;</span><span class="token function">GetReflection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Descriptor<span class="token operator">*</span> pDescriptor <span class="token operator">=</span> pMessage<span class="token operator">-&gt;</span><span class="token function">GetDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要明确为什么pb为什么需要反射,以我所在的自驾行业为例,自驾中需要传递的数据非常多，传感器采集信息包括相机，激光雷达，毫米波雷达，导航信息，gnss等，而planning，感知，预测等又会产生很多message，因此需要定义大量pb结构，如果使用get/set读写这些特征，那每个pb格式都要写一遍实现代码，因此我们需要反射来简化这个流程，pb反射流程如下:</p><ol><li>根据messageName获取Descriptor</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Descriptor<span class="token operator">*</span> desc <span class="token operator">=</span>
            google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span><span class="token class-name">DescriptorPool</span><span class="token double-colon punctuation">::</span><span class="token function">generated_pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">FindMessageTypeByName</span><span class="token punctuation">(</span>msg_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>根据descriptor获取Message</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Message<span class="token operator">*</span> message <span class="token operator">=</span>
                google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span><span class="token class-name">MessageFactory</span><span class="token double-colon punctuation">::</span><span class="token function">generated_factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetPrototype</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>获取对应的reflection</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Reflection<span class="token operator">*</span> reflection <span class="token operator">=</span> message<span class="token operator">-&gt;</span><span class="token function">GetReflection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>获取fileDescription,filed_name就是具体字段名</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>FieldDescriptor<span class="token operator">*</span> field_descriptor <span class="token operator">=</span> desc<span class="token operator">-&gt;</span><span class="token function">FindFieldByName</span><span class="token punctuation">(</span>filed_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Message<span class="token operator">*</span> header <span class="token operator">=</span> reflection<span class="token operator">-&gt;</span><span class="token function">MutableMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> field_descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以操作对应的Message了</p><h1 id="_3-利用反射完成非空字段的选取" tabindex="-1"><a class="header-anchor" href="#_3-利用反射完成非空字段的选取" aria-hidden="true">#</a> 3.利用反射完成非空字段的选取</h1><p>我们以一个具体场景为例,那就是实现对pb对象中非空字段的选取，其代码如下:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">PbToMap</span><span class="token punctuation">(</span><span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Message <span class="token operator">&amp;</span>message<span class="token punctuation">,</span>
            std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CASE_FIELD_TYPE</span><span class="token expression"><span class="token punctuation">(</span>cpptype<span class="token punctuation">,</span> method<span class="token punctuation">,</span> valuetype<span class="token punctuation">)</span>                            </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">case</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>FieldDescriptor<span class="token double-colon punctuation">::</span>CPPTYPE_</span><span class="token punctuation">##</span><span class="token expression">cpptype<span class="token operator">:</span> <span class="token punctuation">{</span>                 </span><span class="token punctuation">\\</span>
    <span class="token expression">valuetype value <span class="token operator">=</span> reflection<span class="token operator">-&gt;</span>Get</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">method</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>                 </span><span class="token punctuation">\\</span>
    <span class="token expression">std<span class="token double-colon punctuation">::</span>ostringstream oss<span class="token punctuation">;</span>                                                    </span><span class="token punctuation">\\</span>
    <span class="token expression">oss <span class="token operator">&lt;&lt;</span> value<span class="token punctuation">;</span>                                                              </span><span class="token punctuation">\\</span>
    <span class="token expression">out<span class="token punctuation">[</span>field<span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> oss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">break</span><span class="token punctuation">;</span>                                                                     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CASE_FIELD_TYPE_ENUM</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                 </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">case</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>FieldDescriptor<span class="token double-colon punctuation">::</span>CPPTYPE_ENUM<span class="token operator">:</span> <span class="token punctuation">{</span>                      </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">int</span> value <span class="token operator">=</span> reflection<span class="token operator">-&gt;</span><span class="token function">GetEnum</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 </span><span class="token punctuation">\\</span>
    <span class="token expression">std<span class="token double-colon punctuation">::</span>ostringstream oss<span class="token punctuation">;</span>                                                    </span><span class="token punctuation">\\</span>
    <span class="token expression">oss <span class="token operator">&lt;&lt;</span> value<span class="token punctuation">;</span>                                                              </span><span class="token punctuation">\\</span>
    <span class="token expression">out<span class="token punctuation">[</span>field<span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> oss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">break</span><span class="token punctuation">;</span>                                                                     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CASE_FIELD_TYPE_STRING</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>                                               </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">case</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>FieldDescriptor<span class="token double-colon punctuation">::</span>CPPTYPE_STRING<span class="token operator">:</span> <span class="token punctuation">{</span>                    </span><span class="token punctuation">\\</span>
    <span class="token expression">std<span class="token double-colon punctuation">::</span>string value <span class="token operator">=</span> reflection<span class="token operator">-&gt;</span><span class="token function">GetString</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>                 </span><span class="token punctuation">\\</span>
    <span class="token expression">out<span class="token punctuation">[</span>field<span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                                                </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">break</span><span class="token punctuation">;</span>                                                                     </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span></span></span>

  <span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Descriptor <span class="token operator">*</span>descriptor <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">GetDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>Reflection <span class="token operator">*</span>reflection <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">GetReflection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> descriptor<span class="token operator">-&gt;</span><span class="token function">field_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> google<span class="token double-colon punctuation">::</span>protobuf<span class="token double-colon punctuation">::</span>FieldDescriptor <span class="token operator">*</span>field <span class="token operator">=</span> descriptor<span class="token operator">-&gt;</span><span class="token function">field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> has_field <span class="token operator">=</span> reflection<span class="token operator">-&gt;</span><span class="token function">HasField</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>has_field<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token operator">-&gt;</span><span class="token function">is_repeated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 不支持转换repeated字段</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>field_name <span class="token operator">=</span> field<span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>field<span class="token operator">-&gt;</span><span class="token function">cpp_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CASE_FIELD_TYPE</span><span class="token punctuation">(</span>INT32<span class="token punctuation">,</span> Int32<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE</span><span class="token punctuation">(</span>UINT32<span class="token punctuation">,</span> UInt32<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE</span><span class="token punctuation">(</span>FLOAT<span class="token punctuation">,</span> Float<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE</span><span class="token punctuation">(</span>DOUBLE<span class="token punctuation">,</span> Double<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">,</span> Bool<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE</span><span class="token punctuation">(</span>INT64<span class="token punctuation">,</span> Int64<span class="token punctuation">,</span> <span class="token keyword">int64_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE</span><span class="token punctuation">(</span>UINT64<span class="token punctuation">,</span> UInt64<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE_ENUM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CASE_FIELD_TYPE_STRING</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 其他异常类型</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),c=[e];function l(u,i){return s(),a("div",null,c)}const d=n(o,[["render",l],["__file","protobuf.html.vue"]]);export{d as default};
